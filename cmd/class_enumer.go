// Code generated by "enumer -type Class -trimprefix Class -transform=lower"; DO NOT EDIT.

package cmd

import (
	"fmt"
	"strings"
)

const _ClassName = "meterchargervehicletariffsitemqttdatabaseeebusjavascriptgo"

var _ClassIndex = [...]uint8{0, 5, 12, 19, 25, 29, 33, 41, 46, 56, 58}

const _ClassLowerName = "meterchargervehicletariffsitemqttdatabaseeebusjavascriptgo"

func (i Class) String() string {
	i -= 1
	if i < 0 || i >= Class(len(_ClassIndex)-1) {
		return fmt.Sprintf("Class(%d)", i+1)
	}
	return _ClassName[_ClassIndex[i]:_ClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ClassNoOp() {
	var x [1]struct{}
	_ = x[ClassMeter-(1)]
	_ = x[ClassCharger-(2)]
	_ = x[ClassVehicle-(3)]
	_ = x[ClassTariff-(4)]
	_ = x[ClassSite-(5)]
	_ = x[ClassMqtt-(6)]
	_ = x[ClassDatabase-(7)]
	_ = x[ClassEEBus-(8)]
	_ = x[ClassJavascript-(9)]
	_ = x[ClassGo-(10)]
}

var _ClassValues = []Class{ClassMeter, ClassCharger, ClassVehicle, ClassTariff, ClassSite, ClassMqtt, ClassDatabase, ClassEEBus, ClassJavascript, ClassGo}

var _ClassNameToValueMap = map[string]Class{
	_ClassName[0:5]:        ClassMeter,
	_ClassLowerName[0:5]:   ClassMeter,
	_ClassName[5:12]:       ClassCharger,
	_ClassLowerName[5:12]:  ClassCharger,
	_ClassName[12:19]:      ClassVehicle,
	_ClassLowerName[12:19]: ClassVehicle,
	_ClassName[19:25]:      ClassTariff,
	_ClassLowerName[19:25]: ClassTariff,
	_ClassName[25:29]:      ClassSite,
	_ClassLowerName[25:29]: ClassSite,
	_ClassName[29:33]:      ClassMqtt,
	_ClassLowerName[29:33]: ClassMqtt,
	_ClassName[33:41]:      ClassDatabase,
	_ClassLowerName[33:41]: ClassDatabase,
	_ClassName[41:46]:      ClassEEBus,
	_ClassLowerName[41:46]: ClassEEBus,
	_ClassName[46:56]:      ClassJavascript,
	_ClassLowerName[46:56]: ClassJavascript,
	_ClassName[56:58]:      ClassGo,
	_ClassLowerName[56:58]: ClassGo,
}

var _ClassNames = []string{
	_ClassName[0:5],
	_ClassName[5:12],
	_ClassName[12:19],
	_ClassName[19:25],
	_ClassName[25:29],
	_ClassName[29:33],
	_ClassName[33:41],
	_ClassName[41:46],
	_ClassName[46:56],
	_ClassName[56:58],
}

// ClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClassString(s string) (Class, error) {
	if val, ok := _ClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Class values", s)
}

// ClassValues returns all values of the enum
func ClassValues() []Class {
	return _ClassValues
}

// ClassStrings returns a slice of all String values of the enum
func ClassStrings() []string {
	strs := make([]string, len(_ClassNames))
	copy(strs, _ClassNames)
	return strs
}

// IsAClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Class) IsAClass() bool {
	for _, v := range _ClassValues {
		if i == v {
			return true
		}
	}
	return false
}
